Εργαστήριο ΛΣ 1 / Άσκηση 1 / 2022 - 2023
Ονοματεπώνυμο: Άγγελος Τζώρτζης
Α.Μ.: ice18390094

Εξηγήσεις των scripts δίνονται στα σχόλια του κάθε script.

Άσκηση 1.
#!/bin/bash

#Ελέγχουμε ότι τα ορίσματα είναι ακέραιοι αριθμοί.
if [[ ! $1 =~ ^[0-9]+$ || ! $2 =~ ^[+-]?[0-9]+$ ]]; then
	echo "You must enter 2 integer parameters."
	exit 1
fi

echo "Give name of directory or type 'exit' to exit the script: "
read dir

sum1=0
sum2=0
sum3=0
sum4=0
sum5=0

while [ $dir != 'exit' ]; do
	echo
	# Με σωλήνωση στην εντολή wc -l μετράμε πόσα στοιχεία βρέθηκαν για κάθε αναζήτηση.
	# Βρίσκουμε τους καταλόγους με τα δικαιώματα που προσδιορίσαμε στα ορίσματα.
    tmp=$(find $dir -perm $1 -ls | wc -l)
	# Αυξάνουμε τον μετρητή κάθε φορά που τρέχει η επανάληψη.
    sum1=$((sum1+tmp))
    echo "No. of files in directory tree with perimissions of $1: $tmp"
	# Εμφανίσουμε τα αποτελέσματα.
    find $dir -perm $1 -ls
    
    echo
	# Βρίσκουμε πόσοι κατάλογοι τροποποιήθηκαν τις τελευταίες χ μέρες όπου χ το 2ο όρισμα.
    tmp=$(find $dir -mtime -$2 -ls | wc -l)
    sum2=$((sum2+tmp))
    echo "No. of files in directory tree that were modified the last $2 days: $tmp"
    find $dir -mtime -$2 -ls
    
    echo
	# Βρίσκουμε τους καταλόγους που τροποποιήθηκαν τις τελευταίες χ μέρες όπου χ το 2ο όρισμα.
    tmp=$(find $dir -atime -$2 -ls | wc -l)
    sum3=$((sum3+tmp))
    echo "No. of files in directory tree that were accessed the last $2 days: $tmp"
    find $dir -atime -$2 -ls
    
    echo
	# Με χρήση της grep βρίσκουμε τους καταλόγους που έχουν δικαιώματα ανάγνωσης σε όλους τους χρήστες.
    tmp=$(ls -l | grep -E ^.r..r..r.. | wc -l) 
    sum4=$((sum4+tmp))
    echo "No. of files with read permissions for all users: $tmp"
    ls -l | grep -E ^.r..r..r..
    
    echo
	# Με χρήση της grep βρίσκουμε τους καταλόγους που έχουν δικαιώματα εγγραφής στους άλλους χρήστες.
    tmp=$(ls -l | grep -E ^........w. | wc -l)
    sum5=$((sum5+tmp))
    echo "No. of files with write permissions for other users: $tmp"
    ls -l | grep -E ^........w.
    
	echo
	echo "Give name of directory or type 'exit' to exit: "
	read dir
done

echo "No. of files found after all searches."
echo "No. of files in directory tree with perimissions of $1: $sum1"
echo "No. of files in directory tree that were modified the last $2 days: $sum2"
echo "No. of files in directory tree that were accessed the last $2 days: $sum3"
echo "No. of files with read permissions for all users: $sum4"
echo "No. of files with write permissions for other users: $sum5"


Άσκηση 2.
#!/bin/bash

# Γίνονται έλεγχοι ότι έχουμε τον σωστό αριθμό ορισμάτων.
if [ $# -ne 4 ]; then
	echo "Error! 4 arguments are required."
	exit 1
fi

# Ελέγχουμε εάν ο κατάλογος που ορίσαμε υπάρχει στο σύστημα μας.
if [ ! -d "$1" ]; then
	echo "Error! The directory does not exist in the system."
	exit 1
fi

# Ελέγχουμε εάν ο χρήστης υπάρχει στο αρχείο /etc/passwd.
if ! grep -wq "$4" /etc/passwd; then
	echo "The current user is not in the file /etc/passwd."
	exit 1
fi

# Μετράμε τους ήδη υπάρχοντες φακέλους dbfolder και datafolder ώστε να ξέρουμε απο πού να ξεκινήσει το μέτρημα.
folder_count_db=$(ls -l $1 | grep dbfolder | wc -l)
folder_count_data=$(ls -l $1 | grep datafolder | wc -l)

# Δημιουργούμε τους κατάλληλους φακέλους.
# Μετράμε απο τον αριθμό φακέλων που ήδη υπάρχουν, και φτίαχνουμε επιπλέον φακέλους όσο τον αριθμό που ορίστηκε.
for ((i=$folder_count_db+1;i<=folder_count_db+$2;i++)); do
	mkdir $1/dbfolder$i
done

for ((i=$folder_count_data+1;i<=folder_count_data+$3;i++)); do
	mkdir $1/datafolder$i
done

# Αλλάζουμε ιδιοκτήτη σε όλα τα περιεχόμενα του φακέλο που ορίσαμε.
chown -R $4 $1

Άσκηση 3.

#!/bin/bash

echo "Name   PID   PPID   UID   GID   State"
echo "-------------------------------------"

# Ελέγχουμε τον αριθμό των ορισμάτων ώστε να εμφανίσουμε τα κατάλληλα αποτελέσματα.
if [ $# -eq 0 ]; then
  # Παίρνουμε από όλες τις ενεργές διεργασίες τα στοιχεία που θέλουμε.
  processes=$(ps -eo comm,pid,ppid,uid,gid,state)
elif [ $# -eq 1 ]; then
  # Παίρνουμε από όλες τις ενεργές διεργασίες τα στοιχεία που θέλουμε απο συγκεκριμένο χρήστη.
  processes=$(ps -u $1 -o comm,pid,ppid,uid,gid,state)
else
  # Παίρνουμε από όλες τις ενεργές διεργασίες τα στοιχεία που θέλουμε απο συγκεκριμένο χρήστη
  # και αυτές που βρίσκονται στην κατάσταση που ζητήσαμε στα ορίσματα.
  processes=$(ps -u $1 -o comm,pid,ppid,uid,gid,state --state $2)
fi

# Διατρέχουμε όλες τις γραμμές που αποθηκεύτηκαν στην μεταβλητή $processes και τυπώνουμε τα στοιχεία μας.
while read -r line; do
  echo "$line"
done <<< "$processes"
